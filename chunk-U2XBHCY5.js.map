{
  "version": 3,
  "sources": ["src/app/modules/admin/admin-sidebar.config.ts", "src/app/modules/admin/admin-sidebar.service.ts", "src/app/modules/admin/admin-users/admin-users.component.ts", "src/app/modules/admin/admin-users/admin-users.component.html", "src/app/modules/admin/admin-feedback/admin-feedback.component.ts", "src/app/modules/admin/admin-feedback/admin-feedback.component.html", "src/app/modules/admin/admin-analytics/admin-analytics.component.ts", "src/app/modules/admin/admin-analytics/admin-analytics.component.html", "src/app/modules/admin/admin-settings/admin-settings.component.ts", "src/app/modules/admin/admin-settings/admin-settings.component.html", "src/app/modules/admin/admin.component.ts", "src/app/modules/admin/admin.component.html", "src/app/modules/admin/admin-services.module.ts", "src/app/modules/admin/admin-routing.module.ts", "src/app/modules/admin/admin-shared.module.ts", "src/app/modules/admin/admin.module.ts"],
  "sourcesContent": ["export interface AdminSidebarNavItem {\n  id: string;\n  label: string;\n  icon: string;\n  description: string;\n  order: number;\n  route?: string;\n  badge?: {\n    text: string;\n    color: 'primary' | 'accent' | 'warn' | 'success';\n  };\n  isVisible?: boolean;\n  permissions?: string[];\n}\n\nexport interface AdminSidebarSection {\n  id: string;\n  label: string;\n  icon: string;\n  order: number;\n  items: AdminSidebarNavItem[];\n  isExpanded?: boolean;\n  isCollapsible?: boolean;\n}\n\nexport const ADMIN_SIDEBAR_CONFIG: AdminSidebarSection[] = [\n  {\n    id: 'overview',\n    label: 'Overview',\n    icon: 'dashboard',\n    order: 1,\n    isExpanded: true,\n    isCollapsible: false,\n    items: [\n      {\n        id: 'dashboard',\n        label: 'Dashboard',\n        icon: 'dashboard',\n        description: 'Overview and statistics',\n        order: 1,\n        route: 'dashboard'\n      }\n    ]\n  },\n  {\n    id: 'management',\n    label: 'Management',\n    icon: 'manage_accounts',\n    order: 2,\n    isExpanded: true,\n    isCollapsible: true,\n    items: [\n      {\n        id: 'users',\n        label: 'Users',\n        icon: 'people',\n        description: 'Manage user accounts',\n        order: 1,\n        route: 'users',\n        permissions: ['admin']\n      },\n      {\n        id: 'feedback',\n        label: 'User Feedback',\n        icon: 'feedback',\n        description: 'View and manage user feedback',\n        order: 2,\n        route: 'feedback',\n        permissions: ['admin']\n      }\n    ]\n  },\n  {\n    id: 'analytics',\n    label: 'Analytics',\n    icon: 'analytics',\n    order: 3,\n    isExpanded: true,\n    isCollapsible: true,\n    items: [\n      {\n        id: 'analytics',\n        label: 'Analytics',\n        icon: 'analytics',\n        description: 'App usage statistics',\n        order: 1,\n        route: 'analytics',\n        permissions: ['admin']\n      },\n      {\n        id: 'reports',\n        label: 'Reports',\n        icon: 'assessment',\n        description: 'Generate and view reports',\n        order: 2,\n        route: 'reports',\n        permissions: ['admin'],\n        isVisible: false // Hidden for future implementation\n      }\n    ]\n  },\n  {\n    id: 'system',\n    label: 'System',\n    icon: 'settings',\n    order: 4,\n    isExpanded: true,\n    isCollapsible: true,\n    items: [\n      {\n        id: 'settings',\n        label: 'Settings',\n        icon: 'settings',\n        description: 'Admin configuration',\n        order: 1,\n        route: 'settings',\n        permissions: ['admin']\n      },\n      {\n        id: 'logs',\n        label: 'System Logs',\n        icon: 'list_alt',\n        description: 'View system logs',\n        order: 2,\n        route: 'logs',\n        permissions: ['admin'],\n        isVisible: false // Hidden for future implementation\n      },\n      {\n        id: 'backup',\n        label: 'Backup & Restore',\n        icon: 'backup',\n        description: 'Data backup and restore',\n        order: 3,\n        route: 'backup',\n        permissions: ['admin'],\n        isVisible: false // Hidden for future implementation\n      }\n    ]\n  }\n];\n\n// Helper functions\nexport const getAllAdminSections = (): AdminSidebarSection[] => {\n  return ADMIN_SIDEBAR_CONFIG\n    .sort((a, b) => a.order - b.order)\n    .map(section => ({\n      ...section,\n      items: section.items\n        .filter(item => item.isVisible !== false)\n        .sort((a, b) => a.order - b.order)\n    }));\n};\n\nexport const getAdminSectionById = (sectionId: string): AdminSidebarSection | undefined => {\n  return ADMIN_SIDEBAR_CONFIG.find(section => section.id === sectionId);\n};\n\nexport const getAllAdminItems = (): AdminSidebarNavItem[] => {\n  return ADMIN_SIDEBAR_CONFIG\n    .flatMap(section => section.items)\n    .filter(item => item.isVisible !== false)\n    .sort((a, b) => a.order - b.order);\n};\n\nexport const getAdminItemById = (itemId: string): AdminSidebarNavItem | undefined => {\n  return getAllAdminItems().find(item => item.id === itemId);\n};\n\nexport const getVisibleAdminItems = (userPermissions: string[] = []): AdminSidebarNavItem[] => {\n  return getAllAdminItems().filter(item => {\n    if (!item.permissions) return true;\n    return item.permissions.some(permission => userPermissions.includes(permission));\n  });\n};\n\nexport const getAdminNavigationItems = (userPermissions: string[] = []): AdminSidebarNavItem[] => {\n  return getVisibleAdminItems(userPermissions).filter(item => item.route);\n}; ", "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { \n  AdminSidebarSection, \n  AdminSidebarNavItem, \n  ADMIN_SIDEBAR_CONFIG,\n  getAllAdminSections,\n  getVisibleAdminItems,\n  getAdminItemById,\n  getAdminNavigationItems\n} from './admin-sidebar.config';\n\nexport interface AdminSidebarState {\n  sections: AdminSidebarSection[];\n  navigationItems: AdminSidebarNavItem[];\n  activeSection: string;\n  userPermissions: string[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminSidebarService {\n  private sidebarState = new BehaviorSubject<AdminSidebarState>({\n    sections: [],\n    navigationItems: [],\n    activeSection: 'dashboard',\n    userPermissions: ['admin']\n  });\n\n  public sidebarState$ = this.sidebarState.asObservable();\n\n  constructor() {\n    this.initializeSidebar();\n  }\n\n  private initializeSidebar(): void {\n    const currentState = this.sidebarState.value;\n    const sections = getAllAdminSections();\n    const navigationItems = getVisibleAdminItems(currentState.userPermissions);\n\n    this.sidebarState.next({\n      ...currentState,\n      sections,\n      navigationItems\n    });\n  }\n\n  public getSidebarState(): Observable<AdminSidebarState> {\n    return this.sidebarState$;\n  }\n\n  public getCurrentState(): AdminSidebarState {\n    return this.sidebarState.value;\n  }\n\n  public setActiveSection(sectionId: string): void {\n    const currentState = this.sidebarState.value;\n    this.sidebarState.next({\n      ...currentState,\n      activeSection: sectionId\n    });\n  }\n\n  public getActiveSection(): AdminSidebarNavItem | undefined {\n    const currentState = this.sidebarState.value;\n    return getAdminItemById(currentState.activeSection);\n  }\n\n  public getActiveSectionLabel(): string {\n    const activeItem = this.getActiveSection();\n    return activeItem ? activeItem.label : 'Dashboard';\n  }\n\n  public setUserPermissions(permissions: string[]): void {\n    const currentState = this.sidebarState.value;\n    const navigationItems = getVisibleAdminItems(permissions);\n\n    this.sidebarState.next({\n      ...currentState,\n      userPermissions: permissions,\n      navigationItems\n    });\n  }\n\n  public toggleSection(sectionId: string): void {\n    const currentState = this.sidebarState.value;\n    const sections = currentState.sections.map(section => {\n      if (section.id === sectionId && section.isCollapsible) {\n        return {\n          ...section,\n          isExpanded: !section.isExpanded\n        };\n      }\n      return section;\n    });\n\n    this.sidebarState.next({\n      ...currentState,\n      sections\n    });\n  }\n\n  public isSectionExpanded(sectionId: string): boolean {\n    const currentState = this.sidebarState.value;\n    const section = currentState.sections.find(s => s.id === sectionId);\n    return section ? section.isExpanded || false : false;\n  }\n\n  public isSectionCollapsible(sectionId: string): boolean {\n    const currentState = this.sidebarState.value;\n    const section = currentState.sections.find(s => s.id === sectionId);\n    return section ? section.isCollapsible || false : false;\n  }\n\n  public getSectionItems(sectionId: string): AdminSidebarNavItem[] {\n    const currentState = this.sidebarState.value;\n    const section = currentState.sections.find(s => s.id === sectionId);\n    return section ? section.items : [];\n  }\n\n  public getAllSections(): AdminSidebarSection[] {\n    return this.sidebarState.value.sections;\n  }\n\n  public getAllNavigationItems(): AdminSidebarNavItem[] {\n    return this.sidebarState.value.navigationItems;\n  }\n\n  public addBadgeToItem(itemId: string, badge: { text: string; color: 'primary' | 'accent' | 'warn' | 'success' }): void {\n    const currentState = this.sidebarState.value;\n    const sections = currentState.sections.map(section => ({\n      ...section,\n      items: section.items.map(item => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            badge\n          };\n        }\n        return item;\n      })\n    }));\n\n    this.sidebarState.next({\n      ...currentState,\n      sections\n    });\n  }\n\n  public removeBadgeFromItem(itemId: string): void {\n    const currentState = this.sidebarState.value;\n    const sections = currentState.sections.map(section => ({\n      ...section,\n      items: section.items.map(item => {\n        if (item.id === itemId) {\n          const { badge, ...itemWithoutBadge } = item;\n          return itemWithoutBadge;\n        }\n        return item;\n      })\n    }));\n\n    this.sidebarState.next({\n      ...currentState,\n      sections\n    });\n  }\n\n  public showItem(itemId: string): void {\n    const currentState = this.sidebarState.value;\n    const sections = currentState.sections.map(section => ({\n      ...section,\n      items: section.items.map(item => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            isVisible: true\n          };\n        }\n        return item;\n      })\n    }));\n\n    this.sidebarState.next({\n      ...currentState,\n      sections\n    });\n  }\n\n  public hideItem(itemId: string): void {\n    const currentState = this.sidebarState.value;\n    const sections = currentState.sections.map(section => ({\n      ...section,\n      items: section.items.map(item => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            isVisible: false\n          };\n        }\n        return item;\n      })\n    }));\n\n    this.sidebarState.next({\n      ...currentState,\n      sections\n    });\n  }\n\n  public refreshSidebar(): void {\n    this.initializeSidebar();\n  }\n} ", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Subject } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Auth } from '@angular/fire/auth';\nimport { NotificationService } from 'src/app/util/service/notification.service';\nimport { UserService } from 'src/app/util/service/user.service';\nimport { ConfirmDialogComponent } from 'src/app/util/components/confirm-dialog/confirm-dialog.component';\n\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName?: string;\n  photoURL?: string;\n  emailVerified: boolean;\n  createdAt: Date;\n  lastSignInAt?: Date;\n  isAdmin?: boolean;\n  status: 'active' | 'suspended' | 'pending';\n  totalTransactions?: number;\n  totalCategories?: number;\n}\n\n@Component({\n  selector: 'app-admin-users',\n  templateUrl: './admin-users.component.html',\n  styleUrls: ['./admin-users.component.scss']\n})\nexport class AdminUsersComponent implements OnInit, OnDestroy {\n  usersList: UserData[] = [];\n  filteredUsers: UserData[] = [];\n  isLoading: boolean = false;\n  isMobile: boolean = false;\n  currentUser: any = null;\n  private destroy$ = new Subject<void>();\n\n  // Search and filters\n  searchControl = new FormControl('');\n  statusFilter = new FormControl('all');\n  roleFilter = new FormControl('all');\n\n  // Filter options\n  statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'active', label: 'Active' },\n    { value: 'suspended', label: 'Suspended' },\n    { value: 'pending', label: 'Pending' }\n  ];\n\n  roleOptions = [\n    { value: 'all', label: 'All Roles' },\n    { value: 'user', label: 'User' },\n    { value: 'admin', label: 'Admin' }\n  ];\n\n  // Pagination\n  currentPage = 1;\n  itemsPerPage = 10;\n  totalItems = 0;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private auth: Auth,\n    private userService: UserService,\n    private dialog: MatDialog,\n    private notificationService: NotificationService\n  ) {\n    // Observe breakpoints for mobile detection\n    this.breakpointObserver.observe([Breakpoints.Handset])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(result => {\n        this.isMobile = result.matches;\n      });\n  }\n\n  ngOnInit(): void {\n    this.initializeComponent();\n    this.setupSearchAndFilters();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async initializeComponent(): Promise<void> {\n    this.currentUser = await this.auth.currentUser;\n    await this.loadUsers();\n  }\n\n  private setupSearchAndFilters(): void {\n    // Search functionality\n    this.searchControl.valueChanges\n      .pipe(\n        takeUntil(this.destroy$),\n        debounceTime(300),\n        distinctUntilChanged()\n      )\n      .subscribe(() => {\n        this.applyFilters();\n      });\n\n    // Filter changes\n    this.statusFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n\n    this.roleFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n  }\n\n  private async loadUsers(): Promise<void> {\n    this.isLoading = true;\n    try {\n      // Load users from UserService\n      this.usersList = await this.userService.getAllUsers();\n      this.applyFilters();\n    } catch (error) {\n      console.error('Error loading users:', error);\n      this.notificationService.error('Failed to load users');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private applyFilters(): void {\n    let filtered = [...this.usersList];\n\n    // Search filter\n    const searchTerm = this.searchControl.value?.toLowerCase();\n    if (searchTerm) {\n      filtered = filtered.filter(user =>\n        user.displayName?.toLowerCase().includes(searchTerm) ||\n        user.email.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Status filter\n    const status = this.statusFilter.value;\n    if (status && status !== 'all') {\n      filtered = filtered.filter(user => user.status === status);\n    }\n\n    // Role filter\n    const role = this.roleFilter.value;\n    if (role && role !== 'all') {\n      if (role === 'admin') {\n        filtered = filtered.filter(user => user.isAdmin);\n      } else {\n        filtered = filtered.filter(user => !user.isAdmin);\n      }\n    }\n\n    // Sort by creation date (newest first)\n    filtered.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    this.filteredUsers = filtered;\n    this.totalItems = filtered.length;\n    this.currentPage = 1;\n  }\n\n  public getStatusColor(status: string): string {\n    switch (status) {\n      case 'active': return '#10b981';\n      case 'suspended': return '#ef4444';\n      case 'pending': return '#f59e0b';\n      default: return '#6b7280';\n    }\n  }\n\n  public getStatusIcon(status: string): string {\n    switch (status) {\n      case 'active': return 'check_circle';\n      case 'suspended': return 'block';\n      case 'pending': return 'pending';\n      default: return 'help';\n    }\n  }\n\n  public formatDate(date: Date): string {\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n\n  public formatDateTime(date: Date): string {\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  public async updateUserStatus(user: UserData, newStatus: 'active' | 'suspended' | 'pending'): Promise<void> {\n    try {\n      await this.userService.updateUserStatus(user.uid, newStatus);\n      user.status = newStatus;\n      this.notificationService.success(`User status updated to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      this.notificationService.error('Failed to update user status');\n    }\n  }\n\n  public async deleteUser(user: UserData): Promise<void> {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      width: '400px',\n      data: {\n        title: 'Delete User',\n        message: `Are you sure you want to delete ${user.displayName || user.email}? This action cannot be undone.`,\n        confirmText: 'Delete',\n        cancelText: 'Cancel',\n        confirmColor: 'warn'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(async (result) => {\n      if (result) {\n        try {\n          await this.userService.deleteUser(user.uid);\n          this.usersList = this.usersList.filter(u => u.uid !== user.uid);\n          this.applyFilters();\n          this.notificationService.success('User deleted successfully');\n        } catch (error) {\n          console.error('Error deleting user:', error);\n          this.notificationService.error('Failed to delete user');\n        }\n      }\n    });\n  }\n\n  public sendEmailToUser(user: UserData): void {\n    // Implement email functionality\n    this.notificationService.info(`Email functionality will be implemented for ${user.email}`);\n  }\n\n  public async toggleAdminRole(user: UserData): Promise<void> {\n    try {\n      await this.userService.toggleAdminRole(user.uid);\n      user.isAdmin = !user.isAdmin;\n      this.notificationService.success(`Admin role ${user.isAdmin ? 'granted' : 'revoked'} for ${user.displayName || user.email}`);\n    } catch (error) {\n      console.error('Error toggling admin role:', error);\n      this.notificationService.error('Failed to update admin role');\n    }\n  }\n\n  public getPaginatedUsers(): UserData[] {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    return this.filteredUsers.slice(startIndex, endIndex);\n  }\n\n  public onPageChange(page: number): void {\n    this.currentPage = page;\n  }\n\n  public getTotalPages(): number {\n    return Math.ceil(this.totalItems / this.itemsPerPage);\n  }\n\n  public clearFilters(): void {\n    this.searchControl.setValue('');\n    this.statusFilter.setValue('all');\n    this.roleFilter.setValue('all');\n  }\n\n  public exportUsers(): void {\n    try {\n      const csvContent = this.generateCSV();\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `users_export_${new Date().toISOString().split('T')[0]}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      this.notificationService.success('Users exported successfully');\n    } catch (error) {\n      console.error('Error exporting users:', error);\n      this.notificationService.error('Failed to export users');\n    }\n  }\n\n  private generateCSV(): string {\n    const headers = ['Name', 'Email', 'Status', 'Role', 'Email Verified', 'Created Date', 'Last Sign In', 'Transactions', 'Categories'];\n    const rows = this.filteredUsers.map(user => [\n      user.displayName || 'N/A',\n      user.email,\n      user.status,\n      user.isAdmin ? 'Admin' : 'User',\n      user.emailVerified ? 'Yes' : 'No',\n      this.formatDate(user.createdAt),\n      user.lastSignInAt ? this.formatDateTime(user.lastSignInAt) : 'Never',\n      user.totalTransactions || 0,\n      user.totalCategories || 0\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n} ", "<div class=\"admin-users-container\">\n  <!-- Header -->\n  <div class=\"section-header\">\n    <div class=\"header-content\">\n      <h2>User Management</h2>\n      <p>Manage user accounts and permissions</p>\n    </div>\n    <div class=\"header-actions\">\n      <button mat-raised-button color=\"accent\" (click)=\"exportUsers()\" [disabled]=\"filteredUsers.length === 0\">\n        <mat-icon>download</mat-icon>\n        Export CSV\n      </button>\n      <button mat-raised-button color=\"warn\" (click)=\"clearFilters()\">\n        <mat-icon>clear</mat-icon>\n        Clear Filters\n      </button>\n    </div>\n  </div>\n\n  <!-- Filters and Search -->\n  <div class=\"filters-section\">\n    <div class=\"search-bar\">\n      <mat-form-field appearance=\"fill\" class=\"search-field\">\n        <mat-label>Search users</mat-label>\n        <input matInput [formControl]=\"searchControl\" placeholder=\"Search by name or email\">\n        <mat-icon matSuffix>search</mat-icon>\n      </mat-form-field>\n    </div>\n\n    <div class=\"filter-controls\">\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Status</mat-label>\n        <mat-select [formControl]=\"statusFilter\">\n          <mat-option *ngFor=\"let option of statusOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Role</mat-label>\n        <mat-select [formControl]=\"roleFilter\">\n          <mat-option *ngFor=\"let option of roleOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <!-- Results Summary -->\n  <div class=\"results-summary\">\n    <div class=\"summary-info\">\n      <span class=\"total-count\">Showing {{ filteredUsers.length }} of {{ usersList.length }} users</span>\n      <span class=\"page-info\" *ngIf=\"totalItems > 0\">\n        Page {{ currentPage }} of {{ getTotalPages() }}\n      </span>\n    </div>\n  </div>\n\n  <!-- Loading State -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <mat-spinner diameter=\"40\"></mat-spinner>\n    <p>Loading users...</p>\n  </div>\n\n  <!-- Users List -->\n  <div *ngIf=\"!isLoading && getPaginatedUsers().length > 0\" class=\"users-list\">\n    <div *ngFor=\"let user of getPaginatedUsers()\" class=\"user-item\">\n      <div class=\"user-header\">\n        <div class=\"user-meta\">\n          <div class=\"user-info\">\n            <div class=\"avatar\">\n              <img *ngIf=\"user.photoURL\" [src]=\"user.photoURL\" [alt]=\"user.displayName || user.email\">\n              <mat-icon *ngIf=\"!user.photoURL\">person</mat-icon>\n            </div>\n            <div class=\"user-details\">\n              <h4>{{ user.displayName || 'No Name' }}</h4>\n              <p>{{ user.email }}</p>\n              <div class=\"user-stats\">\n                <span class=\"stat\">\n                  <mat-icon>receipt_long</mat-icon>\n                  {{ user.totalTransactions || 0 }} transactions\n                </span>\n                <span class=\"stat\">\n                  <mat-icon>category</mat-icon>\n                  {{ user.totalCategories || 0 }} categories\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"user-badges\">\n            <span class=\"badge status\" [style.background-color]=\"getStatusColor(user.status)\">\n              <mat-icon>{{ getStatusIcon(user.status) }}</mat-icon>\n              {{ user.status | titlecase }}\n            </span>\n            <span class=\"badge role\" [class.admin]=\"user.isAdmin\">\n              <mat-icon>{{ user.isAdmin ? 'admin_panel_settings' : 'person' }}</mat-icon>\n              {{ user.isAdmin ? 'Admin' : 'User' }}\n            </span>\n            <span class=\"badge verified\" *ngIf=\"user.emailVerified\">\n              <mat-icon>verified</mat-icon>\n              Verified\n            </span>\n          </div>\n        </div>\n        <div class=\"user-actions\">\n          <button mat-icon-button [matMenuTriggerFor]=\"menu\" matTooltip=\"Actions\">\n            <mat-icon>more_vert</mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"updateUserStatus(user, 'active')\" *ngIf=\"user.status !== 'active'\">\n              <mat-icon>check_circle</mat-icon>\n              Activate User\n            </button>\n            <button mat-menu-item (click)=\"updateUserStatus(user, 'suspended')\" *ngIf=\"user.status !== 'suspended'\">\n              <mat-icon>block</mat-icon>\n              Suspend User\n            </button>\n            <button mat-menu-item (click)=\"updateUserStatus(user, 'pending')\" *ngIf=\"user.status !== 'pending'\">\n              <mat-icon>pending</mat-icon>\n              Mark as Pending\n            </button>\n            <mat-divider></mat-divider>\n            <button mat-menu-item (click)=\"toggleAdminRole(user)\">\n              <mat-icon>{{ user.isAdmin ? 'person' : 'admin_panel_settings' }}</mat-icon>\n              {{ user.isAdmin ? 'Remove Admin' : 'Make Admin' }}\n            </button>\n            <mat-divider></mat-divider>\n            <button mat-menu-item (click)=\"sendEmailToUser(user)\">\n              <mat-icon>email</mat-icon>\n              Send Email\n            </button>\n            <mat-divider></mat-divider>\n            <button mat-menu-item (click)=\"deleteUser(user)\" class=\"delete-action\">\n              <mat-icon>delete</mat-icon>\n              Delete User\n            </button>\n          </mat-menu>\n        </div>\n      </div>\n\n      <div class=\"user-content\">\n        <div class=\"user-dates\">\n          <div class=\"date-info\">\n            <span class=\"label\">Created:</span>\n            <span class=\"value\">{{ formatDate(user.createdAt) }}</span>\n          </div>\n          <div class=\"date-info\" *ngIf=\"user.lastSignInAt\">\n            <span class=\"label\">Last Sign In:</span>\n            <span class=\"value\">{{ formatDateTime(user.lastSignInAt) }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Empty State -->\n  <div *ngIf=\"!isLoading && getPaginatedUsers().length === 0\" class=\"empty-state\">\n    <mat-icon>people</mat-icon>\n    <h3>No users found</h3>\n    <p *ngIf=\"filteredUsers.length === 0 && usersList.length > 0\">\n      No users match your current filters. Try adjusting your search criteria.\n    </p>\n    <p *ngIf=\"usersList.length === 0\">\n      No users have registered yet.\n    </p>\n    <button *ngIf=\"filteredUsers.length === 0 && usersList.length > 0\" \n            mat-raised-button color=\"primary\" \n            (click)=\"clearFilters()\">\n      Clear Filters\n    </button>\n  </div>\n\n  <!-- Pagination -->\n  <div *ngIf=\"getTotalPages() > 1\" class=\"pagination-container\">\n    <mat-paginator\n      [length]=\"totalItems\"\n      [pageSize]=\"itemsPerPage\"\n      [pageIndex]=\"currentPage - 1\"\n      [pageSizeOptions]=\"[5, 10, 25, 50]\"\n      (page)=\"onPageChange($event.pageIndex + 1)\"\n      showFirstLastButtons>\n    </mat-paginator>\n  </div>\n</div> ", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Auth } from '@angular/fire/auth';\nimport { NotificationService } from 'src/app/util/service/notification.service';\nimport { FeedbackService, FeedbackData } from 'src/app/util/service/feedback.service';\nimport { ConfirmDialogComponent } from 'src/app/util/components/confirm-dialog/confirm-dialog.component';\nimport { SsrService } from 'src/app/util/service/ssr.service';\n\nexport interface FeedbackFilter {\n  status: string;\n  category: string;\n  priority: string;\n  dateRange: string;\n}\n\n@Component({\n  selector: 'app-admin-feedback',\n  templateUrl: './admin-feedback.component.html',\n  styleUrls: ['./admin-feedback.component.scss']\n})\nexport class AdminFeedbackComponent implements OnInit, OnDestroy {\n  feedbackList: FeedbackData[] = [];\n  filteredFeedback: FeedbackData[] = [];\n  isLoading: boolean = false;\n  isMobile: boolean = false;\n  currentUser: any = null;\n  private destroy$ = new Subject<void>();\n\n  // Search and filters\n  searchControl = new FormControl('');\n  statusFilter = new FormControl('all');\n  categoryFilter = new FormControl('all');\n  priorityFilter = new FormControl('all');\n  dateRangeFilter = new FormControl('all');\n\n  // Filter options\n  statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'pending', label: 'Pending' },\n    { value: 'reviewed', label: 'Reviewed' },\n    { value: 'resolved', label: 'Resolved' }\n  ];\n\n  categoryOptions = [\n    { value: 'all', label: 'All Categories' },\n    { value: 'bug', label: 'Bug Report' },\n    { value: 'feature', label: 'Feature Request' },\n    { value: 'improvement', label: 'Improvement' },\n    { value: 'general', label: 'General' },\n    { value: 'support', label: 'Support' }\n  ];\n\n  priorityOptions = [\n    { value: 'all', label: 'All Priorities' },\n    { value: 'low', label: 'Low' },\n    { value: 'medium', label: 'Medium' },\n    { value: 'high', label: 'High' }\n  ];\n\n  dateRangeOptions = [\n    { value: 'all', label: 'All Time' },\n    { value: 'today', label: 'Today' },\n    { value: 'week', label: 'This Week' },\n    { value: 'month', label: 'This Month' },\n    { value: 'quarter', label: 'This Quarter' }\n  ];\n\n  // Pagination\n  currentPage = 1;\n  itemsPerPage = 10;\n  totalItems = 0;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private auth: Auth,\n    private feedbackService: FeedbackService,\n    private dialog: MatDialog,\n    private notificationService: NotificationService,\n    private ssrService: SsrService\n  ) {\n    // Observe breakpoints for mobile detection\n    this.breakpointObserver.observe([Breakpoints.Handset])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(result => {\n        this.isMobile = result.matches;\n      });\n  }\n\n  ngOnInit(): void {\n    this.initializeComponent();\n    this.setupSearchAndFilters();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async initializeComponent(): Promise<void> {\n    this.currentUser = await this.auth.currentUser;\n    await this.loadFeedback();\n  }\n\n  private setupSearchAndFilters(): void {\n    // Search functionality\n    this.searchControl.valueChanges\n      .pipe(\n        takeUntil(this.destroy$),\n        debounceTime(300),\n        distinctUntilChanged()\n      )\n      .subscribe(() => {\n        this.applyFilters();\n      });\n\n    // Filter changes\n    this.statusFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n\n    this.categoryFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n\n    this.priorityFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n\n    this.dateRangeFilter.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.applyFilters());\n  }\n\n  private async loadFeedback(): Promise<void> {\n    this.isLoading = true;\n    try {\n      // Load feedback from the service\n      this.feedbackList = await this.feedbackService.getAllFeedback();\n      this.applyFilters();\n    } catch (error) {\n      console.error('Error loading feedback:', error);\n      this.notificationService.error('Failed to load feedback');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private applyFilters(): void {\n    let filtered = [...this.feedbackList];\n\n    // Search filter\n    const searchTerm = this.searchControl.value?.toLowerCase();\n    if (searchTerm) {\n      filtered = filtered.filter(feedback =>\n        feedback.name.toLowerCase().includes(searchTerm) ||\n        feedback.email.toLowerCase().includes(searchTerm) ||\n        feedback.subject.toLowerCase().includes(searchTerm) ||\n        feedback.message.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Status filter\n    const status = this.statusFilter.value;\n    if (status && status !== 'all') {\n      filtered = filtered.filter(feedback => feedback.status === status);\n    }\n\n    // Category filter\n    const category = this.categoryFilter.value;\n    if (category && category !== 'all') {\n      filtered = filtered.filter(feedback => feedback.category === category);\n    }\n\n    // Priority filter\n    const priority = this.priorityFilter.value;\n    if (priority && priority !== 'all') {\n      filtered = filtered.filter(feedback => feedback.priority === priority);\n    }\n\n    // Date range filter\n    const dateRange = this.dateRangeFilter.value;\n    if (dateRange && dateRange !== 'all') {\n      filtered = this.filterByDateRange(filtered, dateRange);\n    }\n\n    // Sort by timestamp (newest first)\n    filtered.sort((a, b) => {\n      const dateA = a.timestamp?.toDate?.() || new Date(a.timestamp);\n      const dateB = b.timestamp?.toDate?.() || new Date(b.timestamp);\n      return dateB.getTime() - dateA.getTime();\n    });\n\n    this.filteredFeedback = filtered;\n    this.totalItems = filtered.length;\n    this.currentPage = 1;\n  }\n\n  private filterByDateRange(feedback: FeedbackData[], range: string): FeedbackData[] {\n    const now = new Date();\n    const startDate = new Date();\n\n    switch (range) {\n      case 'today':\n        startDate.setHours(0, 0, 0, 0);\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(now.getMonth() - 3);\n        break;\n      default:\n        return feedback;\n    }\n\n    return feedback.filter(feedback => {\n      const feedbackDate = feedback.timestamp?.toDate?.() || new Date(feedback.timestamp);\n      return feedbackDate >= startDate;\n    });\n  }\n\n  public getStatusColor(status: string): string {\n    switch (status) {\n      case 'pending': return '#f59e0b';\n      case 'reviewed': return '#3b82f6';\n      case 'resolved': return '#10b981';\n      default: return '#6b7280';\n    }\n  }\n\n  public getPriorityColor(priority: string): string {\n    switch (priority) {\n      case 'high': return '#ef4444';\n      case 'medium': return '#f59e0b';\n      case 'low': return '#10b981';\n      default: return '#6b7280';\n    }\n  }\n\n  public getCategoryIcon(category: string): string {\n    switch (category) {\n      case 'bug': return 'bug_report';\n      case 'feature': return 'lightbulb';\n      case 'improvement': return 'trending_up';\n      case 'general': return 'chat';\n      case 'support': return 'help';\n      default: return 'feedback';\n    }\n  }\n\n  public formatDate(timestamp: any): string {\n    if (!timestamp) return 'N/A';\n\n    const date = timestamp.toDate?.() || new Date(timestamp);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  public async updateFeedbackStatus(feedback: FeedbackData, newStatus: string): Promise<void> {\n    try {\n      await this.feedbackService.updateFeedbackStatus(feedback.id!, newStatus as 'pending' | 'reviewed' | 'resolved');\n      feedback.status = newStatus as 'pending' | 'reviewed' | 'resolved';\n      this.notificationService.success(`Feedback status updated to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating feedback status:', error);\n      this.notificationService.error('Failed to update feedback status');\n    }\n  }\n\n  public async deleteFeedback(feedback: FeedbackData): Promise<void> {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      width: this.isMobile ? '90vw' : '400px',\n      data: {\n        title: 'Delete Feedback',\n        message: `Are you sure you want to delete feedback from ${feedback.name}? This action cannot be undone.`,\n        confirmText: 'Delete',\n        cancelText: 'Cancel',\n        type: 'delete'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(async (result) => {\n      if (result && feedback.id) {\n        try {\n          await this.feedbackService.deleteFeedback(feedback.id);\n          this.feedbackList = this.feedbackList.filter(f => f.id !== feedback.id);\n          this.applyFilters();\n          this.notificationService.success('Feedback deleted successfully');\n        } catch (error) {\n          console.error('Error deleting feedback:', error);\n          this.notificationService.error('Failed to delete feedback');\n        }\n      }\n    });\n  }\n\n\n\n  public getPaginatedFeedback(): FeedbackData[] {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    return this.filteredFeedback.slice(startIndex, endIndex);\n  }\n\n  public onPageChange(page: number): void {\n    this.currentPage = page;\n  }\n\n  public getTotalPages(): number {\n    return Math.ceil(this.totalItems / this.itemsPerPage);\n  }\n\n  public clearFilters(): void {\n    this.searchControl.setValue('');\n    this.statusFilter.setValue('all');\n    this.categoryFilter.setValue('all');\n    this.priorityFilter.setValue('all');\n    this.dateRangeFilter.setValue('all');\n  }\n\n  public exportFeedback(): void {\n    if (this.ssrService.isClientSide()) {\n      // Implement CSV export functionality\n      const csvContent = this.generateCSV();\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `feedback-export-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      this.notificationService.success('Feedback exported successfully');\n    }\n  }\n\n  private generateCSV(): string {\n    const headers = ['Name', 'Email', 'Subject', 'Category', 'Priority', 'Status', 'Rating', 'Message', 'Date'];\n    const rows = this.filteredFeedback.map(feedback => [\n      feedback.name,\n      feedback.email,\n      feedback.subject,\n      feedback.category,\n      feedback.priority,\n      feedback.status,\n      feedback.rating || 'N/A',\n      feedback.message.replace(/\"/g, '\"\"'), // Escape quotes\n      this.formatDate(feedback.timestamp)\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n} ", "<div class=\"admin-feedback-container\">\n  <!-- Header -->\n  <div class=\"section-header\">\n    <div class=\"header-content\">\n      <h2>User Feedback Management</h2>\n      <p>View, filter, and manage user feedback submissions</p>\n    </div>\n    <div class=\"header-actions\">\n      <button mat-raised-button color=\"accent\" (click)=\"exportFeedback()\" [disabled]=\"filteredFeedback.length === 0\">\n        <mat-icon>download</mat-icon>\n        Export CSV\n      </button>\n      <button mat-raised-button color=\"warn\" (click)=\"clearFilters()\">\n        <mat-icon>clear</mat-icon>\n        Clear Filters\n      </button>\n    </div>\n  </div>\n\n  <!-- Filters and Search -->\n  <div class=\"filters-section\">\n    <div class=\"search-bar\">\n      <mat-form-field appearance=\"fill\" class=\"search-field\">\n        <mat-label>Search feedback</mat-label>\n        <input matInput [formControl]=\"searchControl\" placeholder=\"Search by name, email, subject, or message\">\n        <mat-icon matSuffix>search</mat-icon>\n      </mat-form-field>\n    </div>\n\n    <div class=\"filter-controls\">\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Status</mat-label>\n        <mat-select [formControl]=\"statusFilter\">\n          <mat-option *ngFor=\"let option of statusOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Category</mat-label>\n        <mat-select [formControl]=\"categoryFilter\">\n          <mat-option *ngFor=\"let option of categoryOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Priority</mat-label>\n        <mat-select [formControl]=\"priorityFilter\">\n          <mat-option *ngFor=\"let option of priorityOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"filter-field\">\n        <mat-label>Date Range</mat-label>\n        <mat-select [formControl]=\"dateRangeFilter\">\n          <mat-option *ngFor=\"let option of dateRangeOptions\" [value]=\"option.value\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <!-- Results Summary -->\n  <div class=\"results-summary\">\n    <div class=\"summary-info\">\n      <span class=\"total-count\">Showing {{ filteredFeedback.length }} of {{ feedbackList.length }} feedback items</span>\n      <span class=\"page-info\" *ngIf=\"totalItems > 0\">\n        Page {{ currentPage }} of {{ getTotalPages() }}\n      </span>\n    </div>\n  </div>\n\n  <!-- Loading State -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <mat-spinner diameter=\"40\"></mat-spinner>\n    <p>Loading feedback...</p>\n  </div>\n\n  <!-- Feedback List -->\n  <div *ngIf=\"!isLoading && getPaginatedFeedback().length > 0\" class=\"feedback-list\">\n    <div *ngFor=\"let feedback of getPaginatedFeedback()\" class=\"feedback-item\">\n      <div class=\"feedback-header\">\n        <div class=\"feedback-meta\">\n          <div class=\"user-info\">\n            <div class=\"avatar\">\n              <mat-icon>person</mat-icon>\n            </div>\n            <div class=\"user-details\">\n              <h4>{{ feedback.name }}</h4>\n              <p>{{ feedback.email }}</p>\n            </div>\n          </div>\n          <div class=\"feedback-badges\">\n            <span class=\"badge category\" [style.background-color]=\"getStatusColor(feedback.status)\">\n              <mat-icon>{{ getCategoryIcon(feedback.category) }}</mat-icon>\n              {{ feedback.category | titlecase }}\n            </span>\n            <span class=\"badge priority\" [style.background-color]=\"getPriorityColor(feedback.priority)\">\n              {{ feedback.priority | titlecase }}\n            </span>\n            <span class=\"badge status\" [style.background-color]=\"getStatusColor(feedback.status)\">\n              {{ feedback.status | titlecase }}\n            </span>\n            <span class=\"badge rating\" *ngIf=\"feedback.rating\">\n              <mat-icon>star</mat-icon>\n              {{ feedback.rating }}/5\n            </span>\n          </div>\n        </div>\n        <div class=\"feedback-actions\">\n          <button mat-icon-button [matMenuTriggerFor]=\"menu\" matTooltip=\"Actions\">\n            <mat-icon>more_vert</mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"updateFeedbackStatus(feedback, 'pending')\" *ngIf=\"feedback.status !== 'pending'\">\n              <mat-icon>pending</mat-icon>\n              Mark as Pending\n            </button>\n            <button mat-menu-item (click)=\"updateFeedbackStatus(feedback, 'reviewed')\" *ngIf=\"feedback.status !== 'reviewed'\">\n              <mat-icon>visibility</mat-icon>\n              Mark as Reviewed\n            </button>\n            <button mat-menu-item (click)=\"updateFeedbackStatus(feedback, 'resolved')\" *ngIf=\"feedback.status !== 'resolved'\">\n              <mat-icon>check_circle</mat-icon>\n              Mark as Resolved\n            </button>\n            <mat-divider></mat-divider>\n            <button mat-menu-item (click)=\"deleteFeedback(feedback)\" class=\"delete-action\">\n              <mat-icon>delete</mat-icon>\n              Delete Feedback\n            </button>\n          </mat-menu>\n        </div>\n      </div>\n\n      <div class=\"feedback-content\">\n        <div class=\"feedback-subject\">\n          <h3>{{ feedback.subject }}</h3>\n          <span class=\"timestamp\">{{ formatDate(feedback.timestamp) }}</span>\n        </div>\n        <div class=\"feedback-message\">\n          <p>{{ feedback.message }}</p>\n        </div>\n      </div>\n\n      <div class=\"feedback-footer\">\n        <div class=\"technical-info\">\n          <span class=\"info-item\">\n            <mat-icon>computer</mat-icon>\n            {{ feedback.userAgent?.substring(0, 50) }}...\n          </span>\n          <span class=\"info-item\">\n            <mat-icon>info</mat-icon>\n            v{{ feedback.appVersion }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Empty State -->\n  <div *ngIf=\"!isLoading && getPaginatedFeedback().length === 0\" class=\"empty-state\">\n    <mat-icon>feedback</mat-icon>\n    <h3>No feedback found</h3>\n    <p *ngIf=\"filteredFeedback.length === 0 && feedbackList.length > 0\">\n      No feedback matches your current filters. Try adjusting your search criteria.\n    </p>\n    <p *ngIf=\"feedbackList.length === 0\">\n      No feedback has been submitted yet.\n    </p>\n    <button *ngIf=\"filteredFeedback.length === 0 && feedbackList.length > 0\" \n            mat-raised-button color=\"primary\" \n            (click)=\"clearFilters()\">\n      Clear Filters\n    </button>\n  </div>\n\n  <!-- Pagination -->\n  <div *ngIf=\"getTotalPages() > 1\" class=\"pagination-container\">\n    <mat-paginator\n      [length]=\"totalItems\"\n      [pageSize]=\"itemsPerPage\"\n      [pageIndex]=\"currentPage - 1\"\n      [pageSizeOptions]=\"[5, 10, 25, 50]\"\n      (page)=\"onPageChange($event.pageIndex + 1)\"\n      showFirstLastButtons>\n    </mat-paginator>\n  </div>\n</div> ", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { UserService } from 'src/app/util/service/user.service';\nimport { FeedbackService } from 'src/app/util/service/feedback.service';\nimport { NotificationService } from 'src/app/util/service/notification.service';\n\nexport interface AnalyticsData {\n  userGrowth: {\n    labels: string[];\n    data: number[];\n  };\n  feedbackTrends: {\n    labels: string[];\n    data: number[];\n  };\n  userActivity: {\n    activeUsers: number;\n    newUsers: number;\n    totalUsers: number;\n  };\n  feedbackMetrics: {\n    totalFeedback: number;\n    pendingFeedback: number;\n    resolvedFeedback: number;\n    averageRating: number;\n  };\n}\n\n@Component({\n  selector: 'app-admin-analytics',\n  templateUrl: './admin-analytics.component.html',\n  styleUrls: ['./admin-analytics.component.scss']\n})\nexport class AdminAnalyticsComponent implements OnInit, OnDestroy {\n  analyticsData: AnalyticsData | null = null;\n  isLoading: boolean = false;\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private userService: UserService,\n    private feedbackService: FeedbackService,\n    private notificationService: NotificationService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadAnalytics();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async loadAnalytics(): Promise<void> {\n    this.isLoading = true;\n    try {\n      // Load user statistics\n      const userStats = await this.userService.getUserStatistics();\n      \n      // Load feedback data\n      const allFeedback = await this.feedbackService.getAllFeedback();\n      \n      // Generate analytics data\n      this.analyticsData = this.generateAnalyticsData(userStats, allFeedback);\n      \n    } catch (error) {\n      console.error('Error loading analytics:', error);\n      this.notificationService.error('Failed to load analytics data');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private generateAnalyticsData(userStats: any, feedbackData: any[]): AnalyticsData {\n    // Generate user growth data (last 6 months)\n    const userGrowth = this.generateUserGrowthData();\n    \n    // Generate feedback trends\n    const feedbackTrends = this.generateFeedbackTrends(feedbackData);\n    \n    // Calculate user activity\n    const userActivity = {\n      activeUsers: userStats.activeUsers,\n      newUsers: userStats.totalUsers * 0.1, // Placeholder - implement real calculation\n      totalUsers: userStats.totalUsers\n    };\n    \n    // Calculate feedback metrics\n    const feedbackMetrics = this.calculateFeedbackMetrics(feedbackData);\n    \n    return {\n      userGrowth,\n      feedbackTrends,\n      userActivity,\n      feedbackMetrics\n    };\n  }\n\n  private generateUserGrowthData(): { labels: string[]; data: number[] } {\n    const labels: string[] = [];\n    const data: number[] = [];\n    \n    for (let i = 5; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      labels.push(date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }));\n      data.push(Math.floor(Math.random() * 50) + 10); // Placeholder data\n    }\n    \n    return { labels, data };\n  }\n\n  private generateFeedbackTrends(feedbackData: any[]): { labels: string[]; data: number[] } {\n    const labels: string[] = [];\n    const data: number[] = [];\n    \n    // Group feedback by month\n    const feedbackByMonth = new Map<string, number>();\n    \n    feedbackData.forEach(feedback => {\n      const date = feedback.timestamp?.toDate?.() || new Date(feedback.timestamp);\n      const monthKey = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      feedbackByMonth.set(monthKey, (feedbackByMonth.get(monthKey) || 0) + 1);\n    });\n    \n    // Generate last 6 months\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      const monthKey = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      labels.push(monthKey);\n      data.push(feedbackByMonth.get(monthKey) || 0);\n    }\n    \n    return { labels, data };\n  }\n\n  private calculateFeedbackMetrics(feedbackData: any[]): any {\n    const totalFeedback = feedbackData.length;\n    const pendingFeedback = feedbackData.filter(f => f.status === 'pending').length;\n    const resolvedFeedback = feedbackData.filter(f => f.status === 'resolved').length;\n    \n    // Calculate average rating\n    const ratings = feedbackData.filter(f => f.rating).map(f => f.rating);\n    const averageRating = ratings.length > 0 \n      ? ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length \n      : 0;\n    \n    return {\n      totalFeedback,\n      pendingFeedback,\n      resolvedFeedback,\n      averageRating: Math.round(averageRating * 10) / 10\n    };\n  }\n\n  public getFeedbackStatusPercentage(status: string): number {\n    if (!this.analyticsData) return 0;\n    \n    const total = this.analyticsData.feedbackMetrics.totalFeedback;\n    if (total === 0) return 0;\n    \n    switch (status) {\n      case 'pending':\n        return Math.round((this.analyticsData.feedbackMetrics.pendingFeedback / total) * 100);\n      case 'resolved':\n        return Math.round((this.analyticsData.feedbackMetrics.resolvedFeedback / total) * 100);\n      default:\n        return 0;\n    }\n  }\n\n  public getStatusColor(status: string): string {\n    switch (status) {\n      case 'pending': return '#f59e0b';\n      case 'resolved': return '#10b981';\n      default: return '#6b7280';\n    }\n  }\n} ", "<div class=\"analytics-container\">\n  <div class=\"section-header\">\n    <h2>Analytics Dashboard</h2>\n    <p>App usage statistics and insights</p>\n  </div>\n\n  <!-- Loading State -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <mat-spinner diameter=\"50\"></mat-spinner>\n    <p>Loading analytics data...</p>\n  </div>\n\n  <!-- Analytics Content -->\n  <div *ngIf=\"!isLoading && analyticsData\" class=\"analytics-content\">\n    <!-- User Activity Cards -->\n    <div class=\"metrics-grid\">\n      <div class=\"metric-card\">\n        <div class=\"metric-icon users\">\n          <mat-icon>people</mat-icon>\n        </div>\n        <div class=\"metric-content\">\n          <h3>{{ analyticsData.userActivity.totalUsers }}</h3>\n          <p>Total Users</p>\n          <span class=\"metric-change positive\">+{{ analyticsData.userActivity.newUsers }} this month</span>\n        </div>\n      </div>\n\n      <div class=\"metric-card\">\n        <div class=\"metric-icon active\">\n          <mat-icon>trending_up</mat-icon>\n        </div>\n        <div class=\"metric-content\">\n          <h3>{{ analyticsData.userActivity.activeUsers }}</h3>\n          <p>Active Users</p>\n          <span class=\"metric-change positive\">Active in last 30 days</span>\n        </div>\n      </div>\n\n      <div class=\"metric-card\">\n        <div class=\"metric-icon feedback\">\n          <mat-icon>feedback</mat-icon>\n        </div>\n        <div class=\"metric-content\">\n          <h3>{{ analyticsData.feedbackMetrics.totalFeedback }}</h3>\n          <p>Total Feedback</p>\n          <span class=\"metric-change neutral\">All time submissions</span>\n        </div>\n      </div>\n\n      <div class=\"metric-card\">\n        <div class=\"metric-icon rating\">\n          <mat-icon>star</mat-icon>\n        </div>\n        <div class=\"metric-content\">\n          <h3>{{ analyticsData.feedbackMetrics.averageRating }}/5</h3>\n          <p>Average Rating</p>\n          <span class=\"metric-change positive\">User satisfaction</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Feedback Status Overview -->\n    <div class=\"feedback-overview\">\n      <h3>Feedback Status Overview</h3>\n      <div class=\"status-cards\">\n        <div class=\"status-card pending\">\n          <div class=\"status-header\">\n            <mat-icon>pending</mat-icon>\n            <span>Pending</span>\n          </div>\n          <div class=\"status-content\">\n            <h4>{{ analyticsData.feedbackMetrics.pendingFeedback }}</h4>\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" \n                   [style.width.%]=\"getFeedbackStatusPercentage('pending')\"\n                   [style.background-color]=\"getStatusColor('pending')\"></div>\n            </div>\n            <span class=\"percentage\">{{ getFeedbackStatusPercentage('pending') }}%</span>\n          </div>\n        </div>\n\n        <div class=\"status-card resolved\">\n          <div class=\"status-header\">\n            <mat-icon>check_circle</mat-icon>\n            <span>Resolved</span>\n          </div>\n          <div class=\"status-content\">\n            <h4>{{ analyticsData.feedbackMetrics.resolvedFeedback }}</h4>\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" \n                   [style.width.%]=\"getFeedbackStatusPercentage('resolved')\"\n                   [style.background-color]=\"getStatusColor('resolved')\"></div>\n            </div>\n            <span class=\"percentage\">{{ getFeedbackStatusPercentage('resolved') }}%</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Section -->\n    <div class=\"charts-section\">\n      <div class=\"chart-container\">\n        <h3>User Growth Trend</h3>\n        <div class=\"chart-placeholder\">\n          <mat-icon>trending_up</mat-icon>\n          <p>User growth chart will be implemented with chart library</p>\n          <div class=\"chart-data\">\n            <div *ngFor=\"let label of analyticsData.userGrowth.labels; let i = index\" class=\"data-point\">\n              <span class=\"label\">{{ label }}</span>\n              <span class=\"value\">{{ analyticsData.userGrowth.data[i] }} users</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chart-container\">\n        <h3>Feedback Trends</h3>\n        <div class=\"chart-placeholder\">\n          <mat-icon>analytics</mat-icon>\n          <p>Feedback trends chart will be implemented with chart library</p>\n          <div class=\"chart-data\">\n            <div *ngFor=\"let label of analyticsData.feedbackTrends.labels; let i = index\" class=\"data-point\">\n              <span class=\"label\">{{ label }}</span>\n              <span class=\"value\">{{ analyticsData.feedbackTrends.data[i] }} feedback</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Quick Insights -->\n    <div class=\"insights-section\">\n      <h3>Quick Insights</h3>\n      <div class=\"insights-grid\">\n        <div class=\"insight-card\">\n          <mat-icon>insights</mat-icon>\n          <h4>User Engagement</h4>\n          <p>{{ (analyticsData.userActivity.activeUsers / analyticsData.userActivity.totalUsers) * 100 }}% of users are active</p>\n        </div>\n        <div class=\"insight-card\">\n          <mat-icon>speed</mat-icon>\n          <h4>Response Time</h4>\n          <p>Average feedback response time: 2.3 days</p>\n        </div>\n        <div class=\"insight-card\">\n          <mat-icon>thumb_up</mat-icon>\n          <h4>Satisfaction</h4>\n          <p>{{ analyticsData.feedbackMetrics.averageRating >= 4 ? 'High' : 'Good' }} user satisfaction rating</p>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Empty State -->\n  <div *ngIf=\"!isLoading && !analyticsData\" class=\"empty-state\">\n    <mat-icon>analytics</mat-icon>\n    <h3>No Analytics Data</h3>\n    <p>Analytics data will appear here once users start using the application.</p>\n  </div>\n</div> ", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NotificationService } from 'src/app/util/service/notification.service';\n\nexport interface AdminSettings {\n  appName: string;\n  appVersion: string;\n  maintenanceMode: boolean;\n  userRegistrationEnabled: boolean;\n  emailNotificationsEnabled: boolean;\n  maxFileUploadSize: number;\n  sessionTimeout: number;\n  backupFrequency: string;\n  analyticsEnabled: boolean;\n  debugMode: boolean;\n}\n\n@Component({\n  selector: 'app-admin-settings',\n  templateUrl: './admin-settings.component.html',\n  styleUrls: ['./admin-settings.component.scss']\n})\nexport class AdminSettingsComponent implements OnInit, OnDestroy {\n  settingsForm: FormGroup;\n  isLoading: boolean = false;\n  isSaving: boolean = false;\n  private destroy$ = new Subject<void>();\n\n  // Settings categories\n  settingsCategories = [\n    {\n      id: 'general',\n      label: 'General Settings',\n      icon: 'settings',\n      description: 'Basic application configuration'\n    },\n    {\n      id: 'security',\n      label: 'Security Settings',\n      icon: 'security',\n      description: 'Security and authentication settings'\n    },\n    {\n      id: 'notifications',\n      label: 'Notifications',\n      icon: 'notifications',\n      description: 'Email and push notification settings'\n    },\n    {\n      id: 'performance',\n      label: 'Performance',\n      icon: 'speed',\n      description: 'Performance and optimization settings'\n    }\n  ];\n\n  activeCategory: string = 'general';\n\n  constructor(\n    private fb: FormBuilder,\n    private notificationService: NotificationService\n  ) {\n    this.settingsForm = this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.loadSettings();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private createForm(): FormGroup {\n    return this.fb.group({\n      // General Settings\n      appName: ['Money Manager', [Validators.required, Validators.minLength(2)]],\n      appVersion: ['1.0.0', [Validators.required]],\n      maintenanceMode: [false],\n      userRegistrationEnabled: [true],\n      \n      // Security Settings\n      sessionTimeout: [30, [Validators.required, Validators.min(5), Validators.max(120)]],\n      maxLoginAttempts: [5, [Validators.required, Validators.min(3), Validators.max(10)]],\n      requireEmailVerification: [true],\n      enableTwoFactor: [false],\n      \n      // Notification Settings\n      emailNotificationsEnabled: [true],\n      pushNotificationsEnabled: [true],\n      feedbackNotificationsEnabled: [true],\n      adminNotificationsEnabled: [true],\n      \n      // Performance Settings\n      maxFileUploadSize: [5, [Validators.required, Validators.min(1), Validators.max(50)]],\n      backupFrequency: ['daily', [Validators.required]],\n      analyticsEnabled: [true],\n      debugMode: [false],\n      cacheEnabled: [true],\n      compressionEnabled: [true]\n    });\n  }\n\n  private async loadSettings(): Promise<void> {\n    this.isLoading = true;\n    try {\n      // Load settings from localStorage or API\n      const savedSettings = localStorage.getItem('admin-settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        this.settingsForm.patchValue(settings);\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n      this.notificationService.error('Failed to load settings');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  public async saveSettings(): Promise<void> {\n    if (this.settingsForm.invalid) {\n      this.notificationService.warning('Please fix the form errors before saving');\n      return;\n    }\n\n    this.isSaving = true;\n    try {\n      const settings = this.settingsForm.value;\n      \n      // Save to localStorage (in real app, save to API)\n      localStorage.setItem('admin-settings', JSON.stringify(settings));\n      \n      this.notificationService.success('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      this.notificationService.error('Failed to save settings');\n    } finally {\n      this.isSaving = false;\n    }\n  }\n\n  public resetSettings(): void {\n    this.settingsForm.reset();\n    this.loadSettings();\n    this.notificationService.info('Settings reset to default values');\n  }\n\n  public setActiveCategory(categoryId: string): void {\n    this.activeCategory = categoryId;\n  }\n\n  public getActiveCategory(): any {\n    return this.settingsCategories.find(category => category.id === this.activeCategory);\n  }\n\n  public exportSettings(): void {\n    try {\n      const settings = this.settingsForm.value;\n      const dataStr = JSON.stringify(settings, null, 2);\n      const blob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `admin-settings-${new Date().toISOString().split('T')[0]}.json`;\n      link.click();\n      URL.revokeObjectURL(url);\n      this.notificationService.success('Settings exported successfully');\n    } catch (error) {\n      console.error('Error exporting settings:', error);\n      this.notificationService.error('Failed to export settings');\n    }\n  }\n\n  public importSettings(event: any): void {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e: any) => {\n      try {\n        const settings = JSON.parse(e.target.result);\n        this.settingsForm.patchValue(settings);\n        this.notificationService.success('Settings imported successfully');\n      } catch (error) {\n        console.error('Error importing settings:', error);\n        this.notificationService.error('Invalid settings file');\n      }\n    };\n    reader.readAsText(file);\n  }\n\n  public getFormControl(name: string) {\n    return this.settingsForm.get(name);\n  }\n\n  public isFormControlInvalid(name: string): boolean {\n    const control = this.getFormControl(name);\n    return control ? control.invalid && control.touched : false;\n  }\n} ", "<div class=\"settings-container\">\n  <div class=\"section-header\">\n    <h2>Admin Settings</h2>\n    <p>Configure application settings and preferences</p>\n  </div>\n\n  <!-- Loading State -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <mat-spinner diameter=\"50\"></mat-spinner>\n    <p>Loading settings...</p>\n  </div>\n\n  <!-- Settings Content -->\n  <div *ngIf=\"!isLoading\" class=\"settings-content\">\n    <form [formGroup]=\"settingsForm\" (ngSubmit)=\"saveSettings()\">\n      <!-- Settings Navigation -->\n      <div class=\"settings-nav\">\n        <div \n          *ngFor=\"let category of settingsCategories\"\n          class=\"nav-item\"\n          [class.active]=\"activeCategory === category.id\"\n          (click)=\"setActiveCategory(category.id)\"\n        >\n          <mat-icon>{{ category.icon }}</mat-icon>\n          <div class=\"nav-content\">\n            <span class=\"nav-label\">{{ category.label }}</span>\n            <span class=\"nav-description\">{{ category.description }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Settings Form -->\n      <div class=\"settings-form\">\n        <!-- General Settings -->\n        <div *ngIf=\"activeCategory === 'general'\" class=\"settings-section\">\n          <h3>General Settings</h3>\n          \n          <div class=\"form-group\">\n            <label for=\"appName\">Application Name</label>\n            <input \n              id=\"appName\"\n              type=\"text\" \n              formControlName=\"appName\"\n              [class.invalid]=\"isFormControlInvalid('appName')\"\n              placeholder=\"Enter application name\"\n            >\n            <div *ngIf=\"isFormControlInvalid('appName')\" class=\"error-message\">\n              Application name is required and must be at least 2 characters\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"appVersion\">Application Version</label>\n            <input \n              id=\"appVersion\"\n              type=\"text\" \n              formControlName=\"appVersion\"\n              [class.invalid]=\"isFormControlInvalid('appVersion')\"\n              placeholder=\"e.g., 1.0.0\"\n            >\n            <div *ngIf=\"isFormControlInvalid('appVersion')\" class=\"error-message\">\n              Version is required\n            </div>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"maintenanceMode\">\n              <span class=\"checkmark\"></span>\n              Enable Maintenance Mode\n            </label>\n            <p class=\"help-text\">When enabled, users will see a maintenance page</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"userRegistrationEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable User Registration\n            </label>\n            <p class=\"help-text\">Allow new users to register accounts</p>\n          </div>\n        </div>\n\n        <!-- Security Settings -->\n        <div *ngIf=\"activeCategory === 'security'\" class=\"settings-section\">\n          <h3>Security Settings</h3>\n          \n          <div class=\"form-group\">\n            <label for=\"sessionTimeout\">Session Timeout (minutes)</label>\n            <input \n              id=\"sessionTimeout\"\n              type=\"number\" \n              formControlName=\"sessionTimeout\"\n              [class.invalid]=\"isFormControlInvalid('sessionTimeout')\"\n              min=\"5\" max=\"120\"\n            >\n            <div *ngIf=\"isFormControlInvalid('sessionTimeout')\" class=\"error-message\">\n              Session timeout must be between 5 and 120 minutes\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"maxLoginAttempts\">Maximum Login Attempts</label>\n            <input \n              id=\"maxLoginAttempts\"\n              type=\"number\" \n              formControlName=\"maxLoginAttempts\"\n              [class.invalid]=\"isFormControlInvalid('maxLoginAttempts')\"\n              min=\"3\" max=\"10\"\n            >\n            <div *ngIf=\"isFormControlInvalid('maxLoginAttempts')\" class=\"error-message\">\n              Login attempts must be between 3 and 10\n            </div>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"requireEmailVerification\">\n              <span class=\"checkmark\"></span>\n              Require Email Verification\n            </label>\n            <p class=\"help-text\">Users must verify their email before accessing the app</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"enableTwoFactor\">\n              <span class=\"checkmark\"></span>\n              Enable Two-Factor Authentication\n            </label>\n            <p class=\"help-text\">Allow users to enable 2FA for additional security</p>\n          </div>\n        </div>\n\n        <!-- Notification Settings -->\n        <div *ngIf=\"activeCategory === 'notifications'\" class=\"settings-section\">\n          <h3>Notification Settings</h3>\n          \n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"emailNotificationsEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable Email Notifications\n            </label>\n            <p class=\"help-text\">Send email notifications to users</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"pushNotificationsEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable Push Notifications\n            </label>\n            <p class=\"help-text\">Send push notifications to mobile devices</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"feedbackNotificationsEnabled\">\n              <span class=\"checkmark\"></span>\n              Feedback Notifications\n            </label>\n            <p class=\"help-text\">Notify admins when new feedback is submitted</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"adminNotificationsEnabled\">\n              <span class=\"checkmark\"></span>\n              Admin Notifications\n            </label>\n            <p class=\"help-text\">Send notifications to admin users</p>\n          </div>\n        </div>\n\n        <!-- Performance Settings -->\n        <div *ngIf=\"activeCategory === 'performance'\" class=\"settings-section\">\n          <h3>Performance Settings</h3>\n          \n          <div class=\"form-group\">\n            <label for=\"maxFileUploadSize\">Maximum File Upload Size (MB)</label>\n            <input \n              id=\"maxFileUploadSize\"\n              type=\"number\" \n              formControlName=\"maxFileUploadSize\"\n              [class.invalid]=\"isFormControlInvalid('maxFileUploadSize')\"\n              min=\"1\" max=\"50\"\n            >\n            <div *ngIf=\"isFormControlInvalid('maxFileUploadSize')\" class=\"error-message\">\n              File size must be between 1 and 50 MB\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"backupFrequency\">Backup Frequency</label>\n            <select \n              id=\"backupFrequency\"\n              formControlName=\"backupFrequency\"\n              [class.invalid]=\"isFormControlInvalid('backupFrequency')\"\n            >\n              <option value=\"daily\">Daily</option>\n              <option value=\"weekly\">Weekly</option>\n              <option value=\"monthly\">Monthly</option>\n            </select>\n            <div *ngIf=\"isFormControlInvalid('backupFrequency')\" class=\"error-message\">\n              Backup frequency is required\n            </div>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"analyticsEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable Analytics\n            </label>\n            <p class=\"help-text\">Collect usage analytics and statistics</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"debugMode\">\n              <span class=\"checkmark\"></span>\n              Debug Mode\n            </label>\n            <p class=\"help-text\">Enable debug logging and development features</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"cacheEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable Caching\n            </label>\n            <p class=\"help-text\">Cache data for improved performance</p>\n          </div>\n\n          <div class=\"form-group checkbox-group\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" formControlName=\"compressionEnabled\">\n              <span class=\"checkmark\"></span>\n              Enable Compression\n            </label>\n            <p class=\"help-text\">Compress responses for faster loading</p>\n          </div>\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"form-actions\">\n          <button \n            type=\"button\" \n            class=\"btn btn-secondary\"\n            (click)=\"resetSettings()\"\n            [disabled]=\"isSaving\"\n          >\n            Reset\n          </button>\n          \n          <div class=\"action-group\">\n            <button \n              type=\"button\" \n              class=\"btn btn-outline\"\n              (click)=\"exportSettings()\"\n              [disabled]=\"isSaving\"\n            >\n              <mat-icon>download</mat-icon>\n              Export\n            </button>\n            \n            <label class=\"btn btn-outline import-btn\">\n              <mat-icon>upload</mat-icon>\n              Import\n              <input \n                type=\"file\" \n                accept=\".json\"\n                (change)=\"importSettings($event)\"\n                style=\"display: none;\"\n              >\n            </label>\n          </div>\n          \n          <button \n            type=\"submit\" \n            class=\"btn btn-primary\"\n            [disabled]=\"settingsForm.invalid || isSaving\"\n          >\n            <mat-spinner *ngIf=\"isSaving\" diameter=\"20\"></mat-spinner>\n            <span *ngIf=\"!isSaving\">Save Settings</span>\n            <span *ngIf=\"isSaving\">Saving...</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div> ", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Auth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { NotificationService } from 'src/app/util/service/notification.service';\nimport { UserService } from 'src/app/util/service/user.service';\nimport { FeedbackService } from 'src/app/util/service/feedback.service';\nimport { AdminSidebarService, AdminSidebarState } from './admin-sidebar.service';\nimport { AdminSidebarSection, AdminSidebarNavItem } from './admin-sidebar.config';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit, OnDestroy {\n  isMobile: boolean = false;\n  isSidebarOpen: boolean = false;\n  currentUser: any = null;\n  isAdmin: boolean = false;\n  userPermissions: string[] = ['admin'];\n  private destroy$ = new Subject<void>();\n\n  // Admin navigation sections from service\n  adminSections: AdminSidebarSection[] = [];\n  adminNavigationItems: AdminSidebarNavItem[] = [];\n  activeSection: string = 'dashboard';\n\n  // Dashboard statistics\n  dashboardStats = {\n    totalUsers: 0,\n    totalFeedback: 0,\n    pendingFeedback: 0,\n    activeUsers: 0,\n    totalTransactions: 0,\n    totalCategories: 0\n  };\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private auth: Auth,\n    private router: Router,\n    private userService: UserService,\n    private feedbackService: FeedbackService,\n    private notificationService: NotificationService,\n    private adminSidebarService: AdminSidebarService\n  ) {\n    // Observe breakpoints for mobile detection\n    this.breakpointObserver.observe([Breakpoints.Handset])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(result => {\n        this.isMobile = result.matches;\n        if (!this.isMobile) {\n          this.isSidebarOpen = false;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.initializeAdmin();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async initializeAdmin(): Promise<void> {\n    try {\n      this.currentUser = await this.auth.currentUser;\n      \n      if (!this.currentUser) {\n        this.notificationService.error('Authentication required');\n        this.router.navigate(['/sign-in']);\n        return;\n      }\n\n      // Check if user is admin\n      this.isAdmin = await this.checkAdminStatus();\n      \n      if (!this.isAdmin) {\n        this.notificationService.error('Admin access required');\n        this.router.navigate(['/dashboard']);\n        return;\n      }\n\n      // Initialize sidebar service\n      this.initializeSidebar();\n      \n      // Load dashboard statistics\n      await this.loadDashboardStats();\n      \n    } catch (error) {\n      console.error('Error initializing admin:', error);\n      this.notificationService.error('Failed to initialize admin panel');\n    }\n  }\n\n  private async checkAdminStatus(): Promise<boolean> {\n    return this.userService.isAdmin;\n  }\n\n  private initializeSidebar(): void {\n    // Set user permissions\n    this.adminSidebarService.setUserPermissions(this.userPermissions);\n    \n    // Subscribe to sidebar state changes\n    this.adminSidebarService.getSidebarState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((state: AdminSidebarState) => {\n        this.adminSections = state.sections;\n        this.adminNavigationItems = state.navigationItems;\n        this.activeSection = state.activeSection;\n      });\n  }\n\n  private async loadDashboardStats(): Promise<void> {\n    try {\n      // Load user statistics\n      const userStats = await this.userService.getUserStatistics();\n      \n      // Load feedback statistics\n      const allFeedback = await this.feedbackService.getAllFeedback();\n      const pendingFeedback = allFeedback.filter(f => f.status === 'pending').length;\n      \n      this.dashboardStats = {\n        totalUsers: userStats.totalUsers,\n        totalFeedback: allFeedback.length,\n        pendingFeedback: pendingFeedback,\n        activeUsers: userStats.activeUsers,\n        totalTransactions: userStats.totalTransactions,\n        totalCategories: userStats.totalCategories\n      };\n\n      // Add badge to feedback item if there are pending items\n      if (pendingFeedback > 0) {\n        this.adminSidebarService.addBadgeToItem('feedback', {\n          text: pendingFeedback.toString(),\n          color: 'warn'\n        });\n      }\n    } catch (error) {\n      console.error('Error loading dashboard stats:', error);\n      this.notificationService.error('Failed to load dashboard statistics');\n    }\n  }\n\n  public setActiveSection(sectionId: string): void {\n    this.adminSidebarService.setActiveSection(sectionId);\n    // Close sidebar on mobile after navigation\n    if (this.isMobile) {\n      this.isSidebarOpen = false;\n    }\n  }\n\n  public getActiveSection(): AdminSidebarNavItem | undefined {\n    return this.adminSidebarService.getActiveSection();\n  }\n\n  public getActiveSectionLabel(): string {\n    return this.adminSidebarService.getActiveSectionLabel();\n  }\n\n  public toggleSidebar(): void {\n    this.isSidebarOpen = !this.isSidebarOpen;\n  }\n\n  public closeSidebar(): void {\n    this.isSidebarOpen = false;\n  }\n\n  public toggleSection(sectionId: string): void {\n    this.adminSidebarService.toggleSection(sectionId);\n  }\n\n  public isSectionExpanded(sectionId: string): boolean {\n    return this.adminSidebarService.isSectionExpanded(sectionId);\n  }\n\n  public isSectionCollapsible(sectionId: string): boolean {\n    return this.adminSidebarService.isSectionCollapsible(sectionId);\n  }\n\n  public getSectionItems(sectionId: string): AdminSidebarNavItem[] {\n    return this.adminSidebarService.getSectionItems(sectionId);\n  }\n\n  public logout(): void {\n    this.auth.signOut().then(() => {\n      this.notificationService.success('Logged out successfully');\n      this.router.navigate(['/sign-in']);\n    }).catch(error => {\n      console.error('Logout error:', error);\n      this.notificationService.error('Failed to logout');\n    });\n  }\n\n  public goToDashboard(): void {\n    this.router.navigate(['/dashboard']);\n  }\n} ", "<div class=\"admin-container\">\n  <!-- Loading State -->\n  <div *ngIf=\"!isAdmin\" class=\"loading-container\">\n    <mat-spinner diameter=\"50\"></mat-spinner>\n    <p>Checking admin access...</p>\n  </div>\n\n  <!-- Admin Panel -->\n  <div *ngIf=\"isAdmin\" class=\"admin-panel\">\n    <!-- Header -->\n    <header class=\"admin-header\">\n      <div class=\"header-content\">\n        <div class=\"header-left\">\n          <button mat-icon-button (click)=\"goToDashboard()\" class=\"back-button\" matTooltip=\"Back to Dashboard\">\n            <mat-icon>arrow_back</mat-icon>\n          </button>\n          <button mat-icon-button (click)=\"toggleSidebar()\" class=\"menu-toggle\" matTooltip=\"Toggle Menu\" *ngIf=\"isMobile\">\n            <mat-icon>menu</mat-icon>\n          </button>\n          <div class=\"header-title\">\n            <h1>Admin Panel</h1>\n            <p>Manage your Money Manager application</p>\n          </div>\n        </div>\n        <div class=\"header-right\">\n          <div class=\"user-info\">\n            <mat-icon>admin_panel_settings</mat-icon>\n            <span>{{ currentUser?.displayName || currentUser?.email }}</span>\n          </div>\n          <button mat-icon-button (click)=\"logout()\" matTooltip=\"Logout\">\n            <mat-icon>logout</mat-icon>\n          </button>\n        </div>\n      </div>\n    </header>\n\n    <!-- Main Content -->\n    <div class=\"admin-content\">\n      <!-- Mobile Overlay -->\n      <div *ngIf=\"isMobile && isSidebarOpen\" class=\"mobile-overlay\" (click)=\"closeSidebar()\"></div>\n      \n      <!-- Sidebar Navigation -->\n      <aside class=\"admin-sidebar\" [class.mobile-sidebar]=\"isMobile\" [class.open]=\"isSidebarOpen\">\n        <div class=\"sidebar-header\">\n          <h3>Admin Navigation</h3>\n        </div>\n        \n        <nav class=\"sidebar-nav\">\n          <!-- Iterate through admin sections -->\n          <div *ngFor=\"let section of adminSections\" class=\"nav-section\">\n            <!-- Section Header -->\n            <div \n              class=\"section-header\"\n              [class.collapsible]=\"section.isCollapsible\"\n              (click)=\"section.isCollapsible ? toggleSection(section.id) : null\"\n            >\n              <div class=\"section-icon\">\n                <mat-icon>{{ section.icon }}</mat-icon>\n              </div>\n              <div class=\"section-content\">\n                <span class=\"section-label\">{{ section.label }}</span>\n              </div>\n              <div class=\"section-toggle\" *ngIf=\"section.isCollapsible\">\n                <mat-icon>{{ isSectionExpanded(section.id) ? 'expand_less' : 'expand_more' }}</mat-icon>\n              </div>\n            </div>\n\n            <!-- Section Items -->\n            <div class=\"section-items\" [class.expanded]=\"isSectionExpanded(section.id)\">\n              <div \n                *ngFor=\"let item of getSectionItems(section.id)\"\n                class=\"nav-item\"\n                [class.active]=\"activeSection === item.id\"\n                (click)=\"setActiveSection(item.id)\"\n                matTooltip=\"{{ item.description }}\"\n              >\n                <div class=\"nav-icon\">\n                  <mat-icon>{{ item.icon }}</mat-icon>\n                </div>\n                <div class=\"nav-content\">\n                  <span class=\"nav-label\">{{ item.label }}</span>\n                  <span class=\"nav-description\">{{ item.description }}</span>\n                </div>\n                <div class=\"nav-indicator\" *ngIf=\"activeSection === item.id\">\n                  <mat-icon>chevron_right</mat-icon>\n                </div>\n                <div class=\"nav-badge\" *ngIf=\"item.badge\">\n                  <span class=\"badge\" [class]=\"'badge-' + item.badge.color\">\n                    {{ item.badge.text }}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <!-- Sidebar Footer -->\n        <div class=\"sidebar-footer\">\n          <div class=\"admin-status\">\n            <mat-icon class=\"status-icon\">verified_user</mat-icon>\n            <span>Admin Access</span>\n          </div>\n        </div>\n      </aside>\n\n      <!-- Main Content Area -->\n      <main class=\"main-content\">\n        <!-- Breadcrumb -->\n        <div class=\"breadcrumb\">\n          <span class=\"breadcrumb-item\">Admin</span>\n          <mat-icon>chevron_right</mat-icon>\n          <span class=\"breadcrumb-item active\">{{ getActiveSectionLabel() }}</span>\n        </div>\n\n        <!-- Dashboard Section -->\n        <div *ngIf=\"activeSection === 'dashboard'\" class=\"dashboard-section\">\n          <div class=\"section-header\">\n            <h2>Dashboard Overview</h2>\n            <p>Key metrics and statistics for your application</p>\n          </div>\n\n          <!-- Statistics Cards -->\n          <div class=\"stats-grid\">\n            <div class=\"stat-card\">\n              <div class=\"stat-icon users\">\n                <mat-icon>people</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.totalUsers }}</h3>\n                <p>Total Users</p>\n                <span class=\"stat-trend positive\">+12% this month</span>\n              </div>\n            </div>\n\n            <div class=\"stat-card\">\n              <div class=\"stat-icon feedback\">\n                <mat-icon>feedback</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.totalFeedback }}</h3>\n                <p>Total Feedback</p>\n                <span class=\"stat-trend positive\">+8% this week</span>\n              </div>\n            </div>\n\n            <div class=\"stat-card\">\n              <div class=\"stat-icon pending\">\n                <mat-icon>pending</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.pendingFeedback }}</h3>\n                <p>Pending Feedback</p>\n                <span class=\"stat-trend neutral\">Requires attention</span>\n              </div>\n            </div>\n\n            <div class=\"stat-card\">\n              <div class=\"stat-icon active\">\n                <mat-icon>trending_up</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.activeUsers }}</h3>\n                <p>Active Users</p>\n                <span class=\"stat-trend positive\">+15% this month</span>\n              </div>\n            </div>\n\n            <div class=\"stat-card\">\n              <div class=\"stat-icon transactions\">\n                <mat-icon>receipt_long</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.totalTransactions }}</h3>\n                <p>Total Transactions</p>\n                <span class=\"stat-trend positive\">+22% this month</span>\n              </div>\n            </div>\n\n            <div class=\"stat-card\">\n              <div class=\"stat-icon categories\">\n                <mat-icon>category</mat-icon>\n              </div>\n              <div class=\"stat-content\">\n                <h3>{{ dashboardStats.totalCategories }}</h3>\n                <p>Total Categories</p>\n                <span class=\"stat-trend neutral\">Stable</span>\n              </div>\n            </div>\n          </div>\n\n          <!-- Quick Actions -->\n          <div class=\"quick-actions\">\n            <h3>Quick Actions</h3>\n            <div class=\"actions-grid\">\n              <button mat-raised-button color=\"primary\" (click)=\"setActiveSection('feedback')\" class=\"action-button\">\n                <mat-icon>feedback</mat-icon>\n                <div class=\"action-content\">\n                  <span class=\"action-title\">View Feedback</span>\n                  <span class=\"action-subtitle\">Manage user feedback</span>\n                </div>\n              </button>\n              <button mat-raised-button color=\"accent\" (click)=\"setActiveSection('users')\" class=\"action-button\">\n                <mat-icon>people</mat-icon>\n                <div class=\"action-content\">\n                  <span class=\"action-title\">Manage Users</span>\n                  <span class=\"action-subtitle\">User account management</span>\n                </div>\n              </button>\n              <button mat-raised-button color=\"warn\" (click)=\"setActiveSection('analytics')\" class=\"action-button\">\n                <mat-icon>analytics</mat-icon>\n                <div class=\"action-content\">\n                  <span class=\"action-title\">View Analytics</span>\n                  <span class=\"action-subtitle\">App usage statistics</span>\n                </div>\n              </button>\n              <button mat-raised-button color=\"primary\" (click)=\"setActiveSection('settings')\" class=\"action-button\">\n                <mat-icon>settings</mat-icon>\n                <div class=\"action-content\">\n                  <span class=\"action-title\">Admin Settings</span>\n                  <span class=\"action-subtitle\">Configuration options</span>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Feedback Section -->\n        <div *ngIf=\"activeSection === 'feedback'\" class=\"feedback-section\">\n          <div class=\"section-header\">\n            <h2>User Feedback Management</h2>\n            <p>View and manage user feedback and suggestions</p>\n          </div>\n          <app-admin-feedback></app-admin-feedback>\n        </div>\n\n        <!-- Users Section -->\n        <div *ngIf=\"activeSection === 'users'\" class=\"users-section\">\n          <div class=\"section-header\">\n            <h2>User Management</h2>\n            <p>Manage user accounts, roles, and permissions</p>\n          </div>\n          <app-admin-users></app-admin-users>\n        </div>\n\n        <!-- Analytics Section -->\n        <div *ngIf=\"activeSection === 'analytics'\" class=\"analytics-section\">\n          <div class=\"section-header\">\n            <h2>Analytics Dashboard</h2>\n            <p>Comprehensive analytics and insights</p>\n          </div>\n          <app-admin-analytics></app-admin-analytics>\n        </div>\n\n        <!-- Settings Section -->\n        <div *ngIf=\"activeSection === 'settings'\" class=\"settings-section\">\n          <div class=\"section-header\">\n            <h2>Admin Settings</h2>\n            <p>Configure application settings and preferences</p>\n          </div>\n          <app-admin-settings></app-admin-settings>\n        </div>\n      </main>\n    </div>\n  </div>\n</div> ", "import { NgModule } from '@angular/core';\nimport { AdminSidebarService } from './admin-sidebar.service';\n\n@NgModule({\n  providers: [\n    AdminSidebarService\n    // Other admin-specific services can be added here\n    // Example: AdminNotificationService, AdminAnalyticsService, etc.\n  ]\n})\nexport class AdminServicesModule { } ", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../../util/guard/auth.guard';\nimport { AdminGuard } from '../../util/guard/admin.guard';\nimport { AdminComponent } from './admin.component';\n\nconst adminRoutes: Routes = [\n  {\n    path: '',\n    component: AdminComponent,\n    canActivate: [AuthGuard, AdminGuard],\n    data: {\n      requireEmailVerification: true,\n      requireActiveSession: true,\n      roles: ['admin']\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(adminRoutes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { } ", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Material Modules commonly used in admin components\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n// Shared Components\nimport { ConfirmDialogComponent } from '../../util/components/confirm-dialog/confirm-dialog.component';\n\n// Admin-specific components, directives, and pipes can be added here\n// Example: AdminStatsCardComponent, AdminStatusBadgeDirective, etc.\n\n@NgModule({\n  declarations: [\n    // Admin-specific components, directives, pipes\n  ],\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ],\n  exports: [\n    CommonModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ]\n})\nexport class AdminSharedModule { } ", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n// Material Modules\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatChipsModule } from '@angular/material/chips';\n\n// Admin Components\nimport { AdminComponent } from './admin.component';\nimport { AdminUsersComponent } from './admin-users/admin-users.component';\nimport { AdminFeedbackComponent } from './admin-feedback/admin-feedback.component';\nimport { AdminAnalyticsComponent } from './admin-analytics/admin-analytics.component';\nimport { AdminSettingsComponent } from './admin-settings/admin-settings.component';\n\n// Admin Services, Routing, and Shared\nimport { AdminServicesModule } from './admin-services.module';\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminSharedModule } from './admin-shared.module';\n\n@NgModule({\n  declarations: [\n    AdminComponent,\n    AdminUsersComponent,\n    AdminFeedbackComponent,\n    AdminAnalyticsComponent,\n    AdminSettingsComponent\n  ],\n  imports: [\n    AdminSharedModule,\n    ReactiveFormsModule,\n    FormsModule,\n    AdminRoutingModule,\n    AdminServicesModule,\n    \n    // Additional Material Modules\n    MatInputModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatPaginatorModule,\n    MatMenuModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatBadgeModule,\n    MatChipsModule\n  ],\n  providers: [\n    // Guards are provided at root level, but we can add admin-specific services here\n  ]\n})\nexport class AdminModule { } "],
  "mappings": "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",
  "names": ["ADMIN_SIDEBAR_CONFIG", "id", "label", "icon", "order", "isExpanded", "isCollapsible", "items", "description", "route", "permissions", "isVisible", "getAllAdminSections", "sort", "a", "b", "map", "section", "__spreadProps", "__spreadValues", "filter", "item", "getAllAdminItems", "ADMIN_SIDEBAR_CONFIG", "flatMap", "section", "items", "filter", "item", "isVisible", "sort", "a", "b", "order", "getAdminItemById", "itemId", "find", "id", "getVisibleAdminItems", "userPermissions", "permissions", "some", "permission", "includes", "AdminSidebarService", "constructor", "sidebarState", "BehaviorSubject", "sections", "navigationItems", "activeSection", "userPermissions", "sidebarState$", "asObservable", "initializeSidebar", "currentState", "value", "getAllAdminSections", "getVisibleAdminItems", "next", "__spreadProps", "__spreadValues", "getSidebarState", "getCurrentState", "setActiveSection", "sectionId", "getActiveSection", "getAdminItemById", "getActiveSectionLabel", "activeItem", "label", "setUserPermissions", "permissions", "toggleSection", "map", "section", "id", "isCollapsible", "isExpanded", "isSectionExpanded", "find", "s", "isSectionCollapsible", "getSectionItems", "items", "getAllSections", "getAllNavigationItems", "addBadgeToItem", "itemId", "badge", "item", "removeBadgeFromItem", "itemWithoutBadge", "showItem", "isVisible", "hideItem", "refreshSidebar", "factory", "\u0275fac", "providedIn", "_AdminSidebarService", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "option_r1", "value", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "label", "option_r2", "\u0275\u0275textInterpolate2", "ctx_r2", "currentPage", "getTotalPages", "\u0275\u0275element", "user_r5", "photoURL", "\u0275\u0275sanitizeUrl", "displayName", "email", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r6", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "updateUserStatus", "_r7", "_r8", "\u0275\u0275textInterpolate", "formatDateTime", "lastSignInAt", "\u0275\u0275template", "AdminUsersComponent_div_41_div_1_img_5_Template", "AdminUsersComponent_div_41_div_1_mat_icon_6_Template", "AdminUsersComponent_div_41_div_1_span_31_Template", "AdminUsersComponent_div_41_div_1_button_38_Template", "AdminUsersComponent_div_41_div_1_button_39_Template", "AdminUsersComponent_div_41_div_1_button_40_Template", "_r4", "toggleAdminRole", "sendEmailToUser", "deleteUser", "AdminUsersComponent_div_41_div_1_div_63_Template", "totalTransactions", "totalCategories", "\u0275\u0275styleProp", "getStatusColor", "status", "getStatusIcon", "\u0275\u0275pipeBind1", "\u0275\u0275classProp", "isAdmin", "emailVerified", "menu_r9", "formatDate", "createdAt", "AdminUsersComponent_div_41_div_1_Template", "getPaginatedUsers", "_r10", "clearFilters", "AdminUsersComponent_div_42_p_5_Template", "AdminUsersComponent_div_42_p_6_Template", "AdminUsersComponent_div_42_button_7_Template", "filteredUsers", "length", "usersList", "$event", "_r11", "onPageChange", "pageIndex", "totalItems", "itemsPerPage", "\u0275\u0275pureFunction0", "_c0", "AdminUsersComponent", "constructor", "breakpointObserver", "auth", "userService", "dialog", "notificationService", "isLoading", "isMobile", "currentUser", "destroy$", "Subject", "searchControl", "FormControl", "statusFilter", "roleFilter", "statusOptions", "roleOptions", "observe", "Breakpoints", "Handset", "pipe", "takeUntil", "subscribe", "result", "matches", "ngOnInit", "initializeComponent", "setupSearchAndFilters", "ngOnDestroy", "next", "complete", "__async", "loadUsers", "valueChanges", "debounceTime", "distinctUntilChanged", "applyFilters", "getAllUsers", "error", "console", "_a", "filtered", "searchTerm", "toLowerCase", "filter", "user", "includes", "role", "sort", "a", "b", "getTime", "date", "toLocaleDateString", "year", "month", "day", "hour", "minute", "newStatus", "uid", "success", "open", "ConfirmDialogComponent", "width", "data", "title", "message", "confirmText", "cancelText", "confirmColor", "afterClosed", "u", "info", "startIndex", "endIndex", "slice", "page", "Math", "ceil", "setValue", "exportUsers", "csvContent", "generateCSV", "blob", "Blob", "type", "link", "document", "createElement", "url", "URL", "createObjectURL", "setAttribute", "Date", "toISOString", "split", "style", "visibility", "body", "appendChild", "click", "removeChild", "headers", "rows", "map", "row", "cell", "join", "\u0275\u0275directiveInject", "BreakpointObserver", "Auth", "UserService", "MatDialog", "NotificationService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "AdminUsersComponent_mat_option_29_Template", "AdminUsersComponent_mat_option_34_Template", "AdminUsersComponent_span_39_Template", "AdminUsersComponent_div_40_Template", "AdminUsersComponent_div_41_Template", "AdminUsersComponent_div_42_Template", "AdminUsersComponent_div_43_Template", "_AdminUsersComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "option_r1", "value", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "label", "option_r2", "option_r3", "option_r4", "\u0275\u0275textInterpolate2", "ctx_r4", "currentPage", "getTotalPages", "\u0275\u0275element", "feedback_r7", "rating", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r8", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "updateFeedbackStatus", "_r9", "_r10", "\u0275\u0275template", "AdminFeedbackComponent_div_51_div_1_span_24_Template", "AdminFeedbackComponent_div_51_div_1_button_31_Template", "AdminFeedbackComponent_div_51_div_1_button_32_Template", "AdminFeedbackComponent_div_51_div_1_button_33_Template", "_r6", "deleteFeedback", "\u0275\u0275textInterpolate", "name", "email", "\u0275\u0275styleProp", "getStatusColor", "status", "getCategoryIcon", "category", "\u0275\u0275pipeBind1", "getPriorityColor", "priority", "menu_r11", "subject", "formatDate", "timestamp", "message", "userAgent", "substring", "appVersion", "AdminFeedbackComponent_div_51_div_1_Template", "getPaginatedFeedback", "_r12", "clearFilters", "AdminFeedbackComponent_div_52_p_5_Template", "AdminFeedbackComponent_div_52_p_6_Template", "AdminFeedbackComponent_div_52_button_7_Template", "filteredFeedback", "length", "feedbackList", "$event", "_r13", "onPageChange", "pageIndex", "totalItems", "itemsPerPage", "\u0275\u0275pureFunction0", "_c0", "AdminFeedbackComponent", "constructor", "breakpointObserver", "auth", "feedbackService", "dialog", "notificationService", "ssrService", "isLoading", "isMobile", "currentUser", "destroy$", "Subject", "searchControl", "FormControl", "statusFilter", "categoryFilter", "priorityFilter", "dateRangeFilter", "statusOptions", "categoryOptions", "priorityOptions", "dateRangeOptions", "observe", "Breakpoints", "Handset", "pipe", "takeUntil", "subscribe", "result", "matches", "ngOnInit", "initializeComponent", "setupSearchAndFilters", "ngOnDestroy", "next", "complete", "__async", "loadFeedback", "valueChanges", "debounceTime", "distinctUntilChanged", "applyFilters", "getAllFeedback", "error", "console", "_a", "filtered", "searchTerm", "toLowerCase", "filter", "feedback", "includes", "dateRange", "filterByDateRange", "sort", "a", "b", "_b", "_c", "_d", "dateA", "toDate", "Date", "getTime", "range", "now", "startDate", "setHours", "setDate", "getDate", "setMonth", "getMonth", "toLocaleDateString", "year", "month", "day", "hour", "minute", "newStatus", "id", "success", "open", "ConfirmDialogComponent", "width", "data", "title", "confirmText", "cancelText", "type", "afterClosed", "f", "startIndex", "endIndex", "slice", "page", "Math", "ceil", "setValue", "exportFeedback", "isClientSide", "csvContent", "generateCSV", "blob", "Blob", "url", "window", "URL", "createObjectURL", "document", "createElement", "href", "download", "toISOString", "split", "click", "revokeObjectURL", "headers", "rows", "map", "replace", "row", "cell", "join", "\u0275\u0275directiveInject", "BreakpointObserver", "Auth", "FeedbackService", "MatDialog", "NotificationService", "SsrService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "AdminFeedbackComponent_mat_option_29_Template", "AdminFeedbackComponent_mat_option_34_Template", "AdminFeedbackComponent_mat_option_39_Template", "AdminFeedbackComponent_mat_option_44_Template", "AdminFeedbackComponent_span_49_Template", "AdminFeedbackComponent_div_50_Template", "AdminFeedbackComponent_div_51_Template", "AdminFeedbackComponent_div_52_Template", "AdminFeedbackComponent_div_53_Template", "_AdminFeedbackComponent", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "label_r1", "\u0275\u0275textInterpolate1", "ctx_r2", "analyticsData", "userGrowth", "data", "i_r2", "label_r4", "feedbackTrends", "i_r5", "\u0275\u0275template", "AdminAnalyticsComponent_div_7_div_86_Template", "AdminAnalyticsComponent_div_7_div_96_Template", "userActivity", "totalUsers", "newUsers", "activeUsers", "feedbackMetrics", "totalFeedback", "averageRating", "pendingFeedback", "\u0275\u0275styleProp", "getFeedbackStatusPercentage", "getStatusColor", "resolvedFeedback", "\u0275\u0275property", "labels", "AdminAnalyticsComponent", "constructor", "userService", "feedbackService", "notificationService", "isLoading", "destroy$", "Subject", "ngOnInit", "loadAnalytics", "ngOnDestroy", "next", "complete", "__async", "userStats", "getUserStatistics", "allFeedback", "getAllFeedback", "generateAnalyticsData", "error", "console", "feedbackData", "generateUserGrowthData", "generateFeedbackTrends", "calculateFeedbackMetrics", "i", "date", "Date", "setMonth", "getMonth", "push", "toLocaleDateString", "month", "year", "Math", "floor", "random", "feedbackByMonth", "Map", "forEach", "feedback", "_a", "_b", "monthKey", "timestamp", "toDate", "set", "get", "length", "filter", "f", "status", "ratings", "rating", "map", "reduce", "sum", "round", "total", "\u0275\u0275directiveInject", "UserService", "FeedbackService", "NotificationService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "AdminAnalyticsComponent_div_6_Template", "AdminAnalyticsComponent_div_7_Template", "AdminAnalyticsComponent_div_8_Template", "_AdminAnalyticsComponent", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "category_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setActiveCategory", "id", "\u0275\u0275classProp", "activeCategory", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "icon", "label", "description", "\u0275\u0275template", "AdminSettingsComponent_div_7_div_5_div_7_Template", "AdminSettingsComponent_div_7_div_5_div_12_Template", "isFormControlInvalid", "\u0275\u0275property", "AdminSettingsComponent_div_7_div_6_div_7_Template", "AdminSettingsComponent_div_7_div_6_div_12_Template", "AdminSettingsComponent_div_7_div_8_div_7_Template", "AdminSettingsComponent_div_7_div_8_div_18_Template", "_r1", "saveSettings", "AdminSettingsComponent_div_7_div_3_Template", "AdminSettingsComponent_div_7_div_5_Template", "AdminSettingsComponent_div_7_div_6_Template", "AdminSettingsComponent_div_7_div_7_Template", "AdminSettingsComponent_div_7_div_8_Template", "resetSettings", "exportSettings", "$event", "importSettings", "AdminSettingsComponent_div_7_mat_spinner_23_Template", "AdminSettingsComponent_div_7_span_24_Template", "AdminSettingsComponent_div_7_span_25_Template", "settingsForm", "settingsCategories", "isSaving", "invalid", "AdminSettingsComponent", "constructor", "fb", "notificationService", "isLoading", "destroy$", "Subject", "createForm", "ngOnInit", "loadSettings", "ngOnDestroy", "next", "complete", "group", "appName", "Validators", "required", "minLength", "appVersion", "maintenanceMode", "userRegistrationEnabled", "sessionTimeout", "min", "max", "maxLoginAttempts", "requireEmailVerification", "enableTwoFactor", "emailNotificationsEnabled", "pushNotificationsEnabled", "feedbackNotificationsEnabled", "adminNotificationsEnabled", "maxFileUploadSize", "backupFrequency", "analyticsEnabled", "debugMode", "cacheEnabled", "compressionEnabled", "__async", "savedSettings", "localStorage", "getItem", "settings", "JSON", "parse", "patchValue", "error", "console", "warning", "value", "setItem", "stringify", "success", "reset", "info", "categoryId", "getActiveCategory", "find", "category", "dataStr", "blob", "Blob", "type", "url", "URL", "createObjectURL", "link", "document", "createElement", "href", "download", "Date", "toISOString", "split", "click", "revokeObjectURL", "event", "file", "target", "files", "reader", "FileReader", "onload", "e", "result", "readAsText", "getFormControl", "name", "get", "control", "touched", "\u0275\u0275directiveInject", "FormBuilder", "NotificationService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "AdminSettingsComponent_div_6_Template", "AdminSettingsComponent_div_7_Template", "_AdminSettingsComponent", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleSidebar", "_r4", "closeSidebar", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "isSectionExpanded", "section_r6", "id", "\u0275\u0275classMap", "item_r8", "badge", "color", "\u0275\u0275textInterpolate1", "text", "_r7", "$implicit", "setActiveSection", "\u0275\u0275template", "AdminComponent_div_2_div_29_div_10_div_9_Template", "AdminComponent_div_2_div_29_div_10_div_10_Template", "\u0275\u0275classProp", "activeSection", "\u0275\u0275propertyInterpolate", "description", "icon", "label", "\u0275\u0275property", "_r5", "isCollapsible", "toggleSection", "AdminComponent_div_2_div_29_div_8_Template", "AdminComponent_div_2_div_29_div_10_Template", "getSectionItems", "_r9", "dashboardStats", "totalUsers", "totalFeedback", "pendingFeedback", "activeUsers", "totalTransactions", "totalCategories", "_r1", "goToDashboard", "AdminComponent_div_2_button_7_Template", "logout", "AdminComponent_div_2_div_23_Template", "AdminComponent_div_2_div_29_Template", "AdminComponent_div_2_div_44_Template", "AdminComponent_div_2_div_45_Template", "AdminComponent_div_2_div_46_Template", "AdminComponent_div_2_div_47_Template", "AdminComponent_div_2_div_48_Template", "isMobile", "currentUser", "displayName", "email", "isSidebarOpen", "adminSections", "getActiveSectionLabel", "AdminComponent", "constructor", "breakpointObserver", "auth", "router", "userService", "feedbackService", "notificationService", "adminSidebarService", "isAdmin", "userPermissions", "destroy$", "Subject", "adminNavigationItems", "observe", "Breakpoints", "Handset", "pipe", "takeUntil", "subscribe", "result", "matches", "ngOnInit", "initializeAdmin", "ngOnDestroy", "next", "complete", "__async", "error", "navigate", "checkAdminStatus", "initializeSidebar", "loadDashboardStats", "console", "setUserPermissions", "getSidebarState", "state", "sections", "navigationItems", "userStats", "getUserStatistics", "allFeedback", "getAllFeedback", "filter", "f", "status", "length", "addBadgeToItem", "toString", "sectionId", "getActiveSection", "isSectionCollapsible", "signOut", "then", "success", "catch", "\u0275\u0275directiveInject", "BreakpointObserver", "Auth", "Router", "UserService", "FeedbackService", "NotificationService", "AdminSidebarService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "AdminComponent_div_1_Template", "AdminComponent_div_2_Template", "_AdminComponent", "AdminServicesModule", "AdminSidebarService", "_AdminServicesModule", "adminRoutes", "path", "component", "AdminComponent", "canActivate", "AuthGuard", "AdminGuard", "data", "requireEmailVerification", "requireActiveSession", "roles", "AdminRoutingModule", "RouterModule", "forChild", "_AdminRoutingModule", "AdminSharedModule", "CommonModule", "MatCardModule", "MatButtonModule", "MatIconModule", "MatProgressSpinnerModule", "MatTooltipModule", "_AdminSharedModule", "AdminModule", "AdminSharedModule", "ReactiveFormsModule", "FormsModule", "AdminRoutingModule", "AdminServicesModule", "MatInputModule", "MatFormFieldModule", "MatSelectModule", "MatCheckboxModule", "MatPaginatorModule", "MatMenuModule", "MatDialogModule", "MatDividerModule", "MatBadgeModule", "MatChipsModule", "_AdminModule"]
}
